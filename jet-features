#!/usr/bin/env python2
# vim:fileencoding=utf-8:ft=python

import os
import sys
import ROOT

ROOT.gROOT.SetBatch(True)
ROOT.gSystem.Load("libFWCoreFWLite.so");
ROOT.gSystem.Load("libDataFormatsFWLite.so");
ROOT.FWLiteEnabler.enable()

from math import hypot, pi

from DataFormats.FWLite import Events, Handle

datadir = os.path.join(os.getcwd(), 'data')

default_file = "root://eoscms.cern.ch//eos/cms/store/mc/RunIISummer16MiniAODv2/BulkGravToZZToZhadZhad_narrow_M-1800_13TeV-madgraph/MINIAODSIM/PUMoriond17_80X_mcRun2_asymptotic_2016_TrancheIV_v6-v1/60000/48313E83-C4BD-E611-9A1C-001C23BED459.root"

Z_boson_pdgId = 23 

match_threshold = 0.1

def deltaR(a,b):
    dphi = abs(a.phi()-b.phi())
    if dphi > pi: dphi = 2*pi-dphi
    return hypot(a.eta()-b.eta(),dphi)

def process(events, n):
    jets  = Handle("std::vector<pat::Jet>")
    gens  = Handle("std::vector<reco::GenParticle>")

    datafile = 'vjets.csv' 
    with open(os.path.join(datadir, datafile), 'w') as f:
        f.write("pt,eta,phi,mass,tau21,vjet\n")

        for e, event in enumerate(events):
            if e >= n: break

            event.getByLabel("slimmedJetsAK8",     jets)
            event.getByLabel("prunedGenParticles", gens)
 
            Z_boson_list = [p for p in gens.product() if abs(p.pdgId()) is Z_boson_pdgId]

            for jet in jets.product():

                pt   = jet.userFloat("ak8PFJetsPuppiValueMap:pt")
                eta  = jet.userFloat("ak8PFJetsPuppiValueMap:eta")
                phi  = jet.userFloat("ak8PFJetsPuppiValueMap:phi")
                tau1 = jet.userFloat("ak8PFJetsPuppiValueMap:NjettinessAK8PuppiTau1")
                tau2 = jet.userFloat("ak8PFJetsPuppiValueMap:NjettinessAK8PuppiTau2")
                if tau1 != 0: 
                   tau21 = tau2/tau1
                else:
                   continue 

                # Puppi softdrop mass
                puppi_softdrop = ROOT.TLorentzVector()
                puppi_softdrop_subjet = ROOT.TLorentzVector()
                for it in jet.subjets("SoftDropPuppi"):
                    puppi_softdrop_subjet.SetPtEtaPhiM(it.pt(),it.eta(),it.phi(),it.mass())
                    puppi_softdrop += puppi_softdrop_subjet

                mass = puppi_softdrop.M()

                # MC Truth matching
                for Z_boson in Z_boson_list:
                    vjet = int(deltaR(jet, Z_boson) < match_threshold)
                    if vjet: break

                f.write("%f,%f,%f,%f,%f,%d\n" % (pt, eta, phi, mass, tau21, vjet) )
        
if __name__ == "__main__":
    if not os.path.exists(datadir):
        os.mkdir(datadir)

    if len(sys.argv) == 1:
        process(Events(default_file), 10)
    elif len(sys.argv) == 2:
        process(Events(default_file), int(sys.argv[1]))
    else:
        process(Events(sys.argv[1]),  int(sys.argv[2]))
